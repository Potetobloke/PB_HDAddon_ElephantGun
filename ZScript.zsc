// HD's main ZScript lump.

version "4.11"

// ------------------------------------------------------------
// Van Pelt ''Venator'' Big Game Rifle
// ------------------------------------------------------------

const HDLD_ELEPHANTRIFLE_PB="elg";
const HDLD_ELEPHANTRIFLE_PB_AMMO="ela";

const ENC_ELEPHANTAMMO=ENC_776*1.75;
const ENC_ELEPHANTAMMO_LOADED=ENC_ELEPHANTAMMO*0.7;

class HDElephantRifle:HDWeapon{
	default{
		+hdweapon.fitsinbackpack
		scale 0.71;
		weapon.selectionorder 60;
		weapon.slotnumber 8;
		weapon.kickback 30;
		weapon.bobrangex 0.21;
		weapon.bobrangey 0.86;
		weapon.bobstyle "normal";
		obituary "%k poached %o.";
		inventory.pickupmessage "You got the elephant gun! Bag some big game!";
		tag "Van Pelt ''Venator'' Big Game Rifle";
		hdweapon.refid HDLD_ELEPHANTRIFLE_PB;
		hdweapon.barrelsize 40,1,2;
	}
	override double gunmass(){
		return 12;
	}
	override double weaponbulk(){
		return 110+weaponstatus[ELEPHS_MAG]*(ENC_ELEPHANTAMMO_LOADED);
	}
	
	override void tick(){
		super.tick();
		drainheat(ELEPHS_HEAT,4);
	}
	
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}

	
	override string,double getpickupsprite(){
		return "EGNRZ0",1.;
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			int elammo=hpl.countinv("PB_ElephantRifleAmmo");
			sb.drawimage("EGNRB0",(-52,-4),sb.DI_SCREEN_CENTER_BOTTOM,alpha:elammo?1:0.6,scale:(1.2,1.2));
			sb.drawnum(elammo,-46,-8,basestatusbar.DI_SCREEN_CENTER_BOTTOM,font.CR_BLACK);
		}
		
		sb.drawwepnum(hdw.weaponstatus[ELEPHS_MAG],5);
		if(hdw.weaponstatus[ELEPHS_CHAMBER]==2)sb.drawwepdot(-16,-10,(3,1));
	}
	override string gethelptext(){
		LocalizeHelp();
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_ALTFIRE..StringTable.Localize("  Cycle bolt\n")
		..WEPHELP_ALTFIRE.."+"..WEPHELP_RELOAD..StringTable.Localize("  Load rounds\n")
		..WEPHELP_ALTFIRE.."+"..WEPHELP_UNLOAD..StringTable.Localize("  Take round from chamber\n")
		..WEPHELP_UNLOADUNLOAD
		;
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=Screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-64+bob.y,32,76,
			sb.DI_SCREEN_CENTER
		);
		sb.drawimage(
			"ELPH_FST",bob*1.14,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
		);
		sb.SetClipRect(cx,cy,cw,ch);

		sb.drawimage(
			"ELPH_BST",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9
		);

	}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,5);
			if(owner.countinv("PB_ElephantRifleAmmo"))owner.A_DropInventory("PB_ElephantRifleAmmo",amt*5);
		}
	}
	
	action void A_SetAltHold(bool which){
		if(which)invoker.weaponstatus[0]|=ELEPHF_ALTHOLDING;
		else invoker.weaponstatus[0]&=~ELEPHF_ALTHOLDING;
	}
	
	int handrounds;
	override void DetachFromOwner(){
		if(handrounds>0){
			if(owner)owner.A_DropItem("HDElephantRifleAmmo_Flying",handrounds);
			else A_DropItem("HDElephantRifleAmmo_Flying",handrounds);
		}
		handrounds=0;
		super.detachfromowner();
	}
	
	states{
	select0:
		EGN0 A 0;
		goto select0bfg;
	deselect0:
		EGN0 A 0;
		goto deselect0big;

	ready:
		EGN0 A 1{
			A_WeaponReady(WRF_ALL);
			A_SetAltHold(false);
		}goto readyend;
	//user3:
		//---- A 0 A_MagManager("HD9mMag15");
		//goto ready;
	//user2:
	altfire:
		EGN0 A 0 A_JumpIf(invoker.weaponstatus[0]&ELEPHF_ALTHOLDING,"nope");
		#### ABB 1 A_WeaponBusy();
		#### B 1 A_MuzzleClimb(-frandom(0.06,0.1),-frandom(0.3,0.5));
		#### B 0 A_Refire("chamber");
		goto ready;
	althold:
		#### E 1 A_WeaponReady(WRF_NOFIRE);
		#### E 1{
			A_ClearRefire();
			bool chempty=invoker.weaponstatus[ELEPHS_CHAMBER]<1;
			if(pressingunload()){
				if(chempty){
					return resolvestate("altholdend");
				}else{
					invoker.weaponstatus[0]|=ELEPHF_JUSTUNLOAD;
					return resolvestate("loadchamber");
				}
			}else if(pressingreload()){
				if(
					countinv("PB_ElephantRifleAmmo")
				){
					invoker.weaponstatus[0]&=~ELEPHF_JUSTUNLOAD;
					return resolvestate("reload.cont");
				}
			}
			if(pressingaltfire())return resolvestate("althold");
			return resolvestate("altholdend");
		}
	altholdend:
		EGN0 E 0 A_StartSound("weapons/elephantgun/boltfwd",8);
		#### DC 2 A_WeaponReady(WRF_NOFIRE);
		#### B 3{
			A_WeaponReady(WRF_NOFIRE);
		}
		goto ready;
	loadchamber:
		EGN0 E 1 offset(2,36) A_ClearRefire();
		#### E 1 offset(3,38);
		#### E 1 offset(5,42);
		#### E 1 offset(8,48) A_StartSound("weapons/pocket",9);
		#### E 1 offset(9,52) A_MuzzleClimb(frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2,frandom(-0.2,0.2),0.2);
		#### E 2 offset(8,60);
		#### J 2 offset(7,72);
		---- A 3 offset(6,74) A_StartSound("weapons/pocket",9);
		---- A 4 offset(4,79);
		---- A 4{
			A_StartSound("weapons/bossload",8,volume:0.7);
			if(invoker.weaponstatus[0]&ELEPHF_JUSTUNLOAD){
				int chm=invoker.weaponstatus[ELEPHS_CHAMBER];
				invoker.weaponstatus[ELEPHS_CHAMBER]=0;
				if(chm<2||A_JumpIfInventory("PB_ElephantRifleAmmo",0,"null")){
					class<actor> whatkind=chm==2?"HDElephantRifleAmmo_Flying":"HDSpentElephantRifleRound"; //just use 355 if fuck
					actor rrr=spawn(whatkind,pos+(cos(angle)*10,sin(angle)*10,height-12),ALLOW_REPLACE);
					rrr.angle=angle;rrr.A_ChangeVelocity(1,2,1,CVF_RELATIVE);
				}else HDF.Give(self,"PB_ElephantRifleAmmo",1);
			}else{
				A_TakeInventory("PB_ElephantRifleAmmo",1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[ELEPHS_CHAMBER]=2;
			}
		} 
		---- A 3 offset(4,79);
		---- A 2 offset(7,72);
		---- A 2 offset(8,60);
		---- A 1 offset(7,52);
		---- A 1 offset(5,42);
		---- A 1 offset(3,38);
		---- A 1 offset(2,35);
		EGN0 JIH 3 offset(1,33);
		goto althold;
		
	chamber:
		EGN0 C 2 {
			if(
				invoker.weaponstatus[ELEPHS_CHAMBER]>2
			){
				invoker.weaponstatus[ELEPHS_CHAMBER]+=2;
				A_MuzzleClimb(
					-frandom(0.6,2.3),-frandom(0.6,2.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3)
				);
			}else A_StartSound("weapons/elephantgun/boltback",8);
		}
		#### D 2 offset(1,34);
		#### D 1 offset(2,36){
			if(gunbraced())A_MuzzleClimb(
				frandom(-0.1,0.3),frandom(-0.1,0.3)
			);else A_MuzzleClimb(
				frandom(-0.2,0.8),frandom(-0.4,0.8)
			);
		}
		#### D 2 offset(1,34){
			//eject
			
			int chm=invoker.weaponstatus[ELEPHS_CHAMBER];
			if(chm>1){  
				A_SpawnItemEx(
					"HDElephantRifleAmmo_Flying",cos(pitch)*8,1,height-7-sin(pitch)*8,
					cos(pitch)*cos(angle-80)*4+vel.x,
					cos(pitch)*sin(angle-80)*4+vel.y,
					-sin(pitch)*4+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}else if(chm==1){
				A_SpawnItemEx(
					"HDSpentElephantRifleRound",cos(pitch)*8,1,height-7-sin(pitch)*8,
					cos(pitch)*cos(angle-80)*6+vel.x,
					cos(pitch)*sin(angle-80)*6+vel.y,
					-sin(pitch)*6+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
			//cycle new
			if(invoker.weaponstatus[ELEPHS_MAG]>0){  
				invoker.weaponstatus[ELEPHS_CHAMBER]=2;
				invoker.weaponstatus[ELEPHS_MAG]--;
			}else invoker.weaponstatus[ELEPHS_CHAMBER]=0;
		}
		#### E 4 A_WeaponReady(WRF_NOFIRE);
		#### E 0 A_Refire("althold");
		goto altholdend;
	hold:
		---- A 0{
			bool paf=pressingaltfire();
			if(
				paf&&!(invoker.weaponstatus[0]&ELEPHF_ALTHOLDING)
			)setweaponstate("altfire");
			else if(!paf)invoker.weaponstatus[0]&=~ELEPHF_ALTHOLDING;
		}
		---- A 1 A_WeaponReady(WRF_NONE);
		---- A 0 A_Refire();
		goto ready;
	fire:
		#### A 0{
			invoker.weaponstatus[0]&=~ELEPHF_JUSTUNLOAD;
			if(invoker.weaponstatus[ELEPHS_CHAMBER]==2)setweaponstate("shoot");
		}
		---- A 1 A_WeaponReady(WRF_NONE);
		goto nope;
	shoot:
		#### A 1{
			if(invoker.weaponstatus[ELEPHS_CHAMBER]==2)A_GunFlash();
		}
		#### F 2{
			A_MuzzleClimb(-frandom(1.4,2.2),-frandom(0.4,1.6));
		}
		#### F 1;
		#### A 1 A_WeaponReady();
		---- A 1 A_Refire();
		goto ready;
	flash:
		EGNF A 0;
		#### A 1 bright{
			HDFlashAlpha(64);
			A_Light1();
			let bbb=HDBulletActor.FireBullet(self,"HDB_ElephantRifleBullet");
			A_AlertMonsters();

			invoker.weaponstatus[ELEPHS_CHAMBER]=1;
			invoker.weaponstatus[ELEPHS_HEAT]+=15;
			A_ZoomRecoil(0.91);
			A_StartSound("weapons/elephantgun/fire",CHAN_WEAPON);
		}
		#### B 1{
			A_Light0();
			bool gb=gunbraced();
			//hdplayerpawn(self).gunbraced=false;
			double recoilside=randompick(-1,1);
			double pushforce=frandom(0.5,1)*player.crouchfactor;
			if(
				gb
				&&player.onground
			){
				pushforce*=frandom(0.2,0.3);
				A_ChangeVelocity(
					cos(pitch)*-pushforce,0,
					sin(pitch)*pushforce,
					CVF_RELATIVE
				);
				A_MuzzleClimb(
					recoilside*2,-2.,
					recoilside*1,-1.,
					recoilside*0.4,-0.5,
					recoilside*0.2,-0.2,
					wepdot:true
				);
			}else{
				A_ChangeVelocity(
					cos(pitch)*-pushforce,0,
					sin(pitch)*pushforce,
					CVF_RELATIVE
				);
				A_MuzzleClimb(
					recoilside*5,-frandom(2.,4.),
					recoilside*4,-frandom(1.5,3.),
					recoilside*3,-frandom(1.,2.),
					recoilside*2,-frandom(0.5,1.),
					wepdot:true
				);
				givebody(max(0,3-health));
				damagemobj(invoker,self,2,"bashing");
				IsMoving.Give(self,5);
			}
		}
		stop;

	reload.true:
		#### ABB 1 A_WeaponBusy();
		#### B 1 A_MuzzleClimb(-frandom(0.06,0.1),-frandom(0.3,0.5));
		//carryover from chamber:
			EGN0 C 2 {
			if(
				invoker.weaponstatus[ELEPHS_CHAMBER]>2
			){
				//invoker.weaponstatus[ELEPHS_CHAMBER]+=2;
				A_MuzzleClimb(
					-frandom(0.6,2.3),-frandom(0.6,2.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3),
					-frandom(0.6,1.3),-frandom(0.6,1.3)
				);
			}else A_StartSound("weapons/elephantgun/boltback",8);
		}
		#### D 2 offset(1,34);
		#### D 1 offset(2,36){
			if(gunbraced())A_MuzzleClimb(
				frandom(-0.1,0.3),frandom(-0.1,0.3)
			);else A_MuzzleClimb(
				frandom(-0.2,0.8),frandom(-0.4,0.8)
			);
		}
		#### D 2 offset(1,34){
			//eject
			
			int chm=invoker.weaponstatus[ELEPHS_CHAMBER];
			if(chm==1){
				A_SpawnItemEx(
					"HDSpentElephantRifleRound",cos(pitch)*8,1,height-7-sin(pitch)*8,
					cos(pitch)*cos(angle-80)*6+vel.x,
					cos(pitch)*sin(angle-80)*6+vel.y,
					-sin(pitch)*6+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				invoker.weaponstatus[ELEPHS_CHAMBER]=0;
			}
		}
		#### E 4 A_WeaponReady(WRF_NOFIRE);
		reload.cont:
		---- A 0 
		{
		if(
		
		invoker.weaponstatus[ELEPHS_MAG]>=5
		&&invoker.weaponstatus[ELEPHS_CHAMBER]<2
		&&countinv("PB_ElephantRifleAmmo")
		
		)
			{setweaponstate("loadchamber");}
		}
		#### HIJ 3;
		---- A 1 offset(0,34);
		---- A 1 offset(2,36);
		---- A 1 offset(4,40);
		---- A 2 offset(8,42);
		---- A 2 offset(9,49);
		---- A 2 offset(9,50);
		---- A 0{
			int mg=invoker.weaponstatus[ELEPHS_MAG];
			if(mg==5)setweaponstate("reloaddone");
		}
	loadhand:
		---- A 0 A_JumpIfInventory("PB_ElephantRifleAmmo",1,"loadhandloop");
		goto reloaddone;
	loadhandloop:
		---- A 4{
			int hnd=min(
				countinv("PB_ElephantRifleAmmo"),1,
				5-invoker.weaponstatus[ELEPHS_MAG]
			);
			if(hnd<1){
				setweaponstate("reloaddone");
				return;
			}else{
				A_TakeInventory("PB_ElephantRifleAmmo",hnd,TIF_NOTAKEINFINITE);
				invoker.handrounds=hnd;
				A_StartSound("weapons/pocket",9);
			}
		}
	loadone:
		---- A 3 offset(12,55) A_JumpIf(invoker.handrounds<1,"loadhandnext");
		---- A 4 offset(9,53){
			invoker.handrounds--;
			invoker.weaponstatus[ELEPHS_MAG]++;
			A_StartSound("weapons/bossload",8,volume:0.7);
		}loop;
	loadhandnext:
		---- A 4 offset(10,52);
		---- A 4 offset(11,51){
			if(
				!PressingReload()||
				!countinv("PB_ElephantRifleAmmo")	//don't strip clips automatically
			)setweaponstate("reloaddone");
		}goto loadhandloop;
	reloaddone:
		---- A 2 offset(4,45);
		---- A 2 offset(4,40);
		---- A 2 offset(2,36);
		---- A 2 offset(0,34);
		#### JI 3;
		#### H 0
		{
			if(invoker.weaponstatus[ELEPHS_CHAMBER]<2&&PressingReload())
			{setweaponstate("loadchamber");}
		}
		goto althold;
	unload:
		---- A 1 offset(0,34);
		---- A 1 offset(2,36);
		---- A 1 offset(4,40);
		---- A 2 offset(8,42){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound("weapons/rifleclick2",8);
		}
		---- A 4 offset (14,46){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound("weapons/rifleload",8);
		}
	unloadloop:
		---- A 1 offset(3,41){
			if(invoker.weaponstatus[ELEPHS_MAG]<1)setweaponstate("unloaddone");
			else{
				A_StartSound("weapons/rifleclick2",8);
				invoker.weaponstatus[ELEPHS_MAG]--;
				if(A_JumpIfInventory("PB_ElephantRifleAmmo",0,"null")){
					A_SpawnItemEx(
						"HDElephantRifleAmmo_Flying",cos(pitch)*8,0,height-7-sin(pitch)*8,
						cos(pitch)*cos(angle-frandom(30,50))*1+vel.x,
						cos(pitch)*sin(angle-frandom(30,50))*1+vel.y,
						-sin(pitch)*1+vel.z,
						0,SXF_ABSOLUTEMOMENTUM|
						SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
				}else A_GiveInventory("PB_ElephantRifleAmmo",1);
			}
		}
		---- A 1 offset(2,42);
		loop;
	unloaddone:
		---- A 2 offset(2,42);
		---- A 3 offset(3,41);
		---- A 1 offset(4,40) A_StartSound("weapons/rifleclick",8);
		---- A 1 offset(2,36);
		---- A 1 offset(0,34);
		goto ready;


	spawn:
		EGNR Z -1 nodelay{
		}stop;
	}
	override void initializewepstats(bool idfa){
		weaponstatus[ELEPHS_MAG]=5;
		weaponstatus[ELEPHS_CHAMBER]=2;
	}

}
enum elephantboltriflestatus{
	ELEPHF_SCOPE=1,
	ELEPHF_JUSTUNLOAD=2,
	ELEPHF_ALTHOLDING=4,

	ELEPHS_FLAGS=0,
	ELEPHS_MAG=1,
	ELEPHS_CHAMBER=2, //0 empty, 1 spent, 2 loaded
	ELEPHS_SADDLE=3,
	ELEPHS_HEAT=4,
};

// ------------------------------------------------------------
// .656 Scinmore
// ------------------------------------------------------------
class PB_ElephantRifleAmmo:HDRoundAmmo{
	default{
		+forcexybillboard +cannotpush
		+inventory.ignoreskill
		+hdpickup.multipickup
		xscale 0.7;yscale 0.8;
		inventory.pickupmessage "Picked up a .656 Scinmore round.";
		hdpickup.refid HDLD_ELEPHANTRIFLE_PB_AMMO;
		tag ".656 Scinmore";
		hdpickup.bulk ENC_ELEPHANTAMMO;
		inventory.icon "EGNRB0";
	}
	override string pickupmessage(){
		if(amount>1)return Stringtable.Localize("Picked up some .656 Scinmore rounds.");
		return super.pickupmessage();
	}
	override void SplitPickup(){
		SplitPickupBoxableRound(5,20,"PB_ElephantRifleAmmoBox","EGN5A0","EGNRA0");
		if(amount==5)scale.y=(0.8*0.83);
		else scale.y=0.8;
	}
	override void GetItemsThatUseThis(){
		itemsthatusethis.push("HDElephantRifle");
	}
	states{
	spawn:
		EGNR A -1;
		EGN5 A -1;
	}
}

class PB_ElephantRifleAmmoBox:HDUPK{
	default{
		//$Category "Ammo/Hideous Destructor/"
		//$Title "Box of .656 Scinmore"
		//$Sprite "7BOXA0"

		scale 0.4;
		hdupk.amount 20;
		hdupk.pickupsound "weapons/pocket";
		hdupk.pickupmessage "Pickup up a box of .656 Scinmore rounds.";
		hdupk.pickuptype "PB_ElephantRifleAmmo";
	}
	states{
	spawn:
		EGNR C -1;
	}
}

//Casings and stuff

class HDSpentElephantRifleRound:HDDebris{
	default{
		bouncesound "misc/casing";
		bouncefactor 0.4;
		xscale 0.7;yscale 0.8;
	}
	states{
	spawn:
		EGNC B 2{
			//if(bseesdaggers)angle-=45;else angle+=45;
			if(pos.z-floorz<2&&abs(vel.z)<2.)setstatelabel("death");
		}wait;
	death:
		EGNC B -1;
	}
}

class HDElephantRifleAmmo_Flying:HDUPK{
	default{
		+missile
		+forcexybillboard
		+hdupk.multipickup
		height 4;radius 2;
		bouncetype "doom";
		hdupk.pickuptype "PB_ElephantRifleAmmo";
		hdupk.pickupmessage "Picked up a .656 Scinmore round.";

		bouncesound "misc/casing";
		bouncefactor 0.4;
		xscale 0.7;yscale 0.8;
		maxstepheight 0.6;
	}
	states{
	spawn:
		EGNC A 2{
			//if(bseesdaggers)angle-=45;else angle+=45;
			if(pos.z-floorz<2&&abs(vel.z)<2.)setstatelabel("death");
		}wait;
	death:
		EGNC A -1{
			if(hdmath.deathmatchclutter())A_SetTics(140);
			bmissile=false;
			vel.xy+=(pos.xy-prev.xy)*max(abs(vel.z),abs(prev.z-pos.z),1.);
			if(vel.xy==(0,0)){
				double aaa=angle-90;
				vel.x+=cos(aaa);
				vel.y+=sin(aaa);
			}else{
				A_FaceMovementDirection();
				angle+=90;
			}
			let gdb=getdefaultbytype(pickuptype);
			A_SetSize(gdb.radius,gdb.height);
			return;
		}stop;
	}
}

class HDB_ElephantRifleBullet:HDBulletActor{
	default{
		pushfactor 0.25;
		mass 580;
		speed HDCONST_MPSTODUPT*620;
		accuracy 200;
		stamina 1500;
		woundhealth 35;
		hdbulletactor.hardness 3;
		hdbulletactor.distantsound "world/riflefar";
		hdbulletactor.distantsoundvol 2.;
	}
}

// ------------------------------------------------------------
// Spawner
// ------------------------------------------------------------


class PB_HDElephantGunSpawner : EventHandler
{
override void CheckReplacement(ReplaceEvent e) {
	//return;
	switch (e.Replacee.GetClassName()) {
	
		case 'ClipBoxPickup' 	: if (!random(0, 7)) {e.Replacement = "PB_ElephantGun_Spawn";}	break;
		
		case 'SSGReplaces' 		: if (!random(0, 7)) {e.Replacement = "PB_ElephantGun_Spawn";}	break;
		
		}
	e.IsFinal = false;
	}
}

class PB_ElephantGun_Spawn:IdleDummy{
	states{
	spawn:
		TNT1 A 0 nodelay{
			A_SpawnItemEx("PB_ElephantRifleAmmoBox",1,0,0,0,0,0,0,SXF_NOCHECKPOSITION);

			let ggg=HDElephantRifle(spawn("HDElephantRifle",pos,ALLOW_REPLACE));
			HDF.TransferSpecials(self,ggg,HDF.TS_ALL);
		}stop;
	}
}